# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {

#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) {
		return;

	}

	if(nat_uac_test("8")) {
		rtpengine_manage("SIP-source-address replace-origin replace-session-connection");
	} else {
		rtpengine_manage("replace-origin replace-session-connection");
	}

# 	if (is_request()) {
# 		if (!has_totag()) {
# 			if(t_is_branch_route()) {
# 				add_rr_param(";nat=yes");
# 			}
# 		}
# 	}
# 	if (is_reply()) {
# 		if(isbflagset(FLB_NATB)) {
# 			if(is_first_hop())
# 				set_contact_alias();
# 		}
# 	}

# 	if(isbflagset(FLB_NATB)) {
# 		# no connect message in a dialog involving NAT traversal
# 		if (is_request()) {
# 			if(has_totag()) {
# 				set_forward_no_connect();
# 			}
# 		}
# 	}


#!endif
	return;
}